{"Target":{"Guid":"ef43752f-029d-4d84-a5b6-c52be4c3016d","Ancestry":[{"IsSelected":true,"Selector":"<wnd app=\"notepad.exe\" appid=\"Microsoft.WindowsNotepad_8wekyb3d8bbwe!App\" title=\"*Untitled.txt - Notepad\"/>","ValidAttributes":{"app":"notepad.exe","appid":"Microsoft.WindowsNotepad_8wekyb3d8bbwe!App","title":"*Untitled.txt - Notepad","aastate":"sizeable, moveable, focusable","cls":"Notepad"}},{"IsSelected":true,"Selector":"<wnd cls=\"RichEditD2DPT\"/>","ValidAttributes":{"cls":"RichEditD2DPT","aastate":"focusable"}},{"IsSelected":true,"Selector":"<ctrl role=\"editable text\"/>","ValidAttributes":{"role":"editable text","aastate":"focusable","text":"/*\r Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>\r\r This program is free software; you can redistribute it and/or\r modify it under the terms of the GNU General Public License\r version 2 as published by the Free Software Foundation.\r */\r\r/**\r * Example for Getting Started with nRF24L01+ radios. \r *\r * This is an example of how to use the RF24 class.  Write this sketch to two \r * different nodes.  Put one of the nodes into 'transmit' mode by connecting \r * with the serial monitor and sending a 'T'.  The ping node sends the current \r * time to the pong node, which responds by sending the value back.  The ping \r * node can then see how long the whole cycle took.\r */\r\r#include <SPI.h>\r#include \"nRF24L01.h\"\r#include \"RF24.h\"\r#include \"printf.h\"\r\r//\r// Hardware configuration\r//\r\r// Set up nRF24L01 radio on SPI bus plus pins 9 & 10 \r\rRF24 radio(9,10);\r\r//\r// Topology\r//\r\r// Radio pipe addresses for the 2 nodes to communicate.\rconst uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };\r\r//\r// Role management\r//\r// Set up role.  This sketch uses the same software for all the nodes\r// in this system.  Doing so greatly simplifies testing.  \r//\r\r// The various roles supported by this sketch\rtypedef enum { role_ping_out = 1, role_pong_back } role_e;\r\r// The debug-friendly names of those roles\rconst char* role_friendly_name[] = { \"invalid\", \"Ping out\", \"Pong back\"};\r\r// The role of the current running sketch\rrole_e role = role_pong_back;\r\rvoid setup(void)\r{\r  //\r  // Print preamble\r  //\r\r  Serial.begin(57600);\r  printf_begin();\r  printf(\"\\n\\rRF24/examples/GettingStarted/\\n\\r\");\r  printf(\"ROLE: %s\\n\\r\",role_friendly_name[role]);\r  printf(\"*** PRESS 'T' to begin transmitting to the other node\\n\\r\");\r\r  //\r  // Setup and configure rf radio\r  //\r\r  radio.begin();\r\r radio.setAutoAck(false);\r  // optionally, increase the delay between retries & # of retries\r  radio.setRetries(15,15);\r\r  // optionally, reduce the payload size.  seems to\r  // improve reliability\r  //radio.setPayloadSize(8);\r\r  //\r  // Open pipes to other nodes for communication\r  //\r\r  // This simple sketch opens two pipes for these two nodes to communicate\r  // back and forth.\r  // Open 'our' pipe for writing\r  // Open the 'other' pipe for reading, in position #1 (we can have up to 5 pipes open for reading)\r\r  //if ( role == role_ping_out )\r  {\r    //radio.openWritingPipe(pipes[0]);\r    radio.openReadingPipe(1,pipes[1]);\r  }\r  //else\r  {\r    //radio.openWritingPipe(pipes[1]);\r    //radio.openReadingPipe(1,pipes[0]);\r  }\r\r  //\r  // Start listening\r  //\r\r  radio.startListening();\r\r  //\r  // Dump the configuration of the rf unit for debugging\r  //\r\r  radio.printDetails();\r}\r\rvoid loop(void)\r{\r  //\r  // Ping out role.  Repeatedly send the current time\r  //\r\r  if (role == role_ping_out)\r  {\r    // First, stop listening so we can talk.\r    radio.stopListening();\r\r    // Take the time, and send it.  This will block until complete\r    unsigned long time = millis();\r    printf(\"Now sending %lu...\",time);\r    bool ok = radio.write( &time, sizeof(unsigned long) );\r    \r    if (ok)\r      printf(\"ok...\");\r    else\r      printf(\"failed.\\n\\r\");\r\r    // Now, continue listening\r    radio.startListening();\r\r    // Wait here until we get a response, or timeout (250ms)\r    unsigned long started_waiting_at = millis();\r    bool timeout = false;\r    while ( ! radio.available() && ! timeout )\r      if (millis() - started_waiting_at > 200 )\r        timeout = true;\r\r    // Describe the results\r    if ( timeout )\r    {\r      printf(\"Failed, response timed out.\\n\\r\");\r    }\r    else\r    {\r      // Grab the response, compare, and send to debugging spew\r      unsigned long got_time;\r      radio.read( &got_time, sizeof(unsigned long) );\r\r      // Spew it\r      printf(\"Got response %lu, round-trip delay: %lu\\n\\r\",got_time,millis()-got_time);\r    }\r\r    // Try again 1s later\r    delay(1000);\r  }\r\r  //\r  // Pong back role.  Receive each packet, dump it out, and send it back\r  //\r\r  if ( role == role_pong_back )\r  {\r    // if there is data ready\r    if ( radio.available() )\r    {\r      // Dump the paylo"}}]}}